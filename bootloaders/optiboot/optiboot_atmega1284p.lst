
optiboot_atmega1284p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000782  0001f800  0001f800  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000031d  00800100  00800100  000007f6  2**0
                  ALLOC
  2 .version      00000002  00000000  00000000  000007f6  2**0
                  CONTENTS, READONLY
  3 .stab         00001a1c  00000000  00000000  000007f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001410  00000000  00000000  00002214  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001f800 <main>:
   1f800:	0f 92       	push	r0
   1f802:	cd b7       	in	r28, 0x3d	; 61
   1f804:	de b7       	in	r29, 0x3e	; 62
   1f806:	11 24       	eor	r1, r1
   1f808:	84 b7       	in	r24, 0x34	; 52
   1f80a:	14 be       	out	0x34, r1	; 52
   1f80c:	81 ff       	sbrs	r24, 1
   1f80e:	b4 d3       	rcall	.+1896   	; 0x1ff78 <appStart>
   1f810:	85 e0       	ldi	r24, 0x05	; 5
   1f812:	80 93 81 00 	sts	0x0081, r24
   1f816:	82 e0       	ldi	r24, 0x02	; 2
   1f818:	80 93 c0 00 	sts	0x00C0, r24
   1f81c:	88 e1       	ldi	r24, 0x18	; 24
   1f81e:	80 93 c1 00 	sts	0x00C1, r24
   1f822:	86 e0       	ldi	r24, 0x06	; 6
   1f824:	80 93 c2 00 	sts	0x00C2, r24
   1f828:	80 e1       	ldi	r24, 0x10	; 16
   1f82a:	80 93 c4 00 	sts	0x00C4, r24
   1f82e:	8e e0       	ldi	r24, 0x0E	; 14
   1f830:	8d d3       	rcall	.+1818   	; 0x1ff4c <watchdogConfig>
   1f832:	21 9a       	sbi	0x04, 1	; 4
   1f834:	26 e0       	ldi	r18, 0x06	; 6
   1f836:	80 e3       	ldi	r24, 0x30	; 48
   1f838:	9c ef       	ldi	r25, 0xFC	; 252
   1f83a:	31 e0       	ldi	r19, 0x01	; 1
   1f83c:	90 93 85 00 	sts	0x0085, r25
   1f840:	80 93 84 00 	sts	0x0084, r24
   1f844:	36 bb       	out	0x16, r19	; 22
   1f846:	b0 9b       	sbis	0x16, 0	; 22
   1f848:	fe cf       	rjmp	.-4      	; 0x1f846 <main+0x46>
   1f84a:	19 9a       	sbi	0x03, 1	; 3
   1f84c:	a8 95       	wdr
   1f84e:	21 50       	subi	r18, 0x01	; 1
   1f850:	a9 f7       	brne	.-22     	; 0x1f83c <main+0x3c>
   1f852:	f2 d1       	rcall	.+996    	; 0x1fc38 <mmc_updater>
   1f854:	88 24       	eor	r8, r8
   1f856:	99 24       	eor	r9, r9
   1f858:	dd 24       	eor	r13, r13
   1f85a:	d3 94       	inc	r13
   1f85c:	e1 e1       	ldi	r30, 0x11	; 17
   1f85e:	ee 2e       	mov	r14, r30
   1f860:	73 e0       	ldi	r23, 0x03	; 3
   1f862:	f7 2e       	mov	r15, r23
   1f864:	67 d3       	rcall	.+1742   	; 0x1ff34 <getch>
   1f866:	81 34       	cpi	r24, 0x41	; 65
   1f868:	71 f4       	brne	.+28     	; 0x1f886 <main+0x86>
   1f86a:	64 d3       	rcall	.+1736   	; 0x1ff34 <getch>
   1f86c:	89 83       	std	Y+1, r24	; 0x01
   1f86e:	74 d3       	rcall	.+1768   	; 0x1ff58 <verifySpace>
   1f870:	89 81       	ldd	r24, Y+1	; 0x01
   1f872:	82 38       	cpi	r24, 0x82	; 130
   1f874:	09 f4       	brne	.+2      	; 0x1f878 <main+0x78>
   1f876:	8c c0       	rjmp	.+280    	; 0x1f990 <main+0x190>
   1f878:	81 38       	cpi	r24, 0x81	; 129
   1f87a:	11 f4       	brne	.+4      	; 0x1f880 <main+0x80>
   1f87c:	84 e0       	ldi	r24, 0x04	; 4
   1f87e:	01 c0       	rjmp	.+2      	; 0x1f882 <main+0x82>
   1f880:	83 e0       	ldi	r24, 0x03	; 3
   1f882:	51 d3       	rcall	.+1698   	; 0x1ff26 <putch>
   1f884:	8c c0       	rjmp	.+280    	; 0x1f99e <main+0x19e>
   1f886:	82 34       	cpi	r24, 0x42	; 66
   1f888:	11 f4       	brne	.+4      	; 0x1f88e <main+0x8e>
   1f88a:	84 e1       	ldi	r24, 0x14	; 20
   1f88c:	03 c0       	rjmp	.+6      	; 0x1f894 <main+0x94>
   1f88e:	85 34       	cpi	r24, 0x45	; 69
   1f890:	19 f4       	brne	.+6      	; 0x1f898 <main+0x98>
   1f892:	85 e0       	ldi	r24, 0x05	; 5
   1f894:	69 d3       	rcall	.+1746   	; 0x1ff68 <getNch>
   1f896:	83 c0       	rjmp	.+262    	; 0x1f99e <main+0x19e>
   1f898:	85 35       	cpi	r24, 0x55	; 85
   1f89a:	91 f4       	brne	.+36     	; 0x1f8c0 <main+0xc0>
   1f89c:	4b d3       	rcall	.+1686   	; 0x1ff34 <getch>
   1f89e:	08 2f       	mov	r16, r24
   1f8a0:	10 e0       	ldi	r17, 0x00	; 0
   1f8a2:	48 d3       	rcall	.+1680   	; 0x1ff34 <getch>
   1f8a4:	90 e0       	ldi	r25, 0x00	; 0
   1f8a6:	38 2f       	mov	r19, r24
   1f8a8:	22 27       	eor	r18, r18
   1f8aa:	20 2b       	or	r18, r16
   1f8ac:	31 2b       	or	r19, r17
   1f8ae:	83 2f       	mov	r24, r19
   1f8b0:	88 1f       	adc	r24, r24
   1f8b2:	88 27       	eor	r24, r24
   1f8b4:	88 1f       	adc	r24, r24
   1f8b6:	8b bf       	out	0x3b, r24	; 59
   1f8b8:	49 01       	movw	r8, r18
   1f8ba:	88 0c       	add	r8, r8
   1f8bc:	99 1c       	adc	r9, r9
   1f8be:	6e c0       	rjmp	.+220    	; 0x1f99c <main+0x19c>
   1f8c0:	86 35       	cpi	r24, 0x56	; 86
   1f8c2:	21 f4       	brne	.+8      	; 0x1f8cc <main+0xcc>
   1f8c4:	84 e0       	ldi	r24, 0x04	; 4
   1f8c6:	50 d3       	rcall	.+1696   	; 0x1ff68 <getNch>
   1f8c8:	80 e0       	ldi	r24, 0x00	; 0
   1f8ca:	db cf       	rjmp	.-74     	; 0x1f882 <main+0x82>
   1f8cc:	84 36       	cpi	r24, 0x64	; 100
   1f8ce:	09 f0       	breq	.+2      	; 0x1f8d2 <main+0xd2>
   1f8d0:	41 c0       	rjmp	.+130    	; 0x1f954 <main+0x154>
   1f8d2:	30 d3       	rcall	.+1632   	; 0x1ff34 <getch>
   1f8d4:	2f d3       	rcall	.+1630   	; 0x1ff34 <getch>
   1f8d6:	c8 2e       	mov	r12, r24
   1f8d8:	2d d3       	rcall	.+1626   	; 0x1ff34 <getch>
   1f8da:	80 e0       	ldi	r24, 0x00	; 0
   1f8dc:	88 16       	cp	r8, r24
   1f8de:	80 ee       	ldi	r24, 0xE0	; 224
   1f8e0:	98 06       	cpc	r9, r24
   1f8e2:	18 f4       	brcc	.+6      	; 0x1f8ea <main+0xea>
   1f8e4:	f4 01       	movw	r30, r8
   1f8e6:	f7 be       	out	0x37, r15	; 55
   1f8e8:	e8 95       	spm
   1f8ea:	00 e0       	ldi	r16, 0x00	; 0
   1f8ec:	11 e0       	ldi	r17, 0x01	; 1
   1f8ee:	22 d3       	rcall	.+1604   	; 0x1ff34 <getch>
   1f8f0:	f8 01       	movw	r30, r16
   1f8f2:	81 93       	st	Z+, r24
   1f8f4:	8f 01       	movw	r16, r30
   1f8f6:	ce 16       	cp	r12, r30
   1f8f8:	d1 f7       	brne	.-12     	; 0x1f8ee <main+0xee>
   1f8fa:	f0 e0       	ldi	r31, 0x00	; 0
   1f8fc:	8f 16       	cp	r8, r31
   1f8fe:	f0 ee       	ldi	r31, 0xE0	; 224
   1f900:	9f 06       	cpc	r9, r31
   1f902:	18 f0       	brcs	.+6      	; 0x1f90a <main+0x10a>
   1f904:	f4 01       	movw	r30, r8
   1f906:	f7 be       	out	0x37, r15	; 55
   1f908:	e8 95       	spm
   1f90a:	26 d3       	rcall	.+1612   	; 0x1ff58 <verifySpace>
   1f90c:	07 b6       	in	r0, 0x37	; 55
   1f90e:	00 fc       	sbrc	r0, 0
   1f910:	fd cf       	rjmp	.-6      	; 0x1f90c <main+0x10c>
   1f912:	f4 01       	movw	r30, r8
   1f914:	a0 e0       	ldi	r26, 0x00	; 0
   1f916:	b1 e0       	ldi	r27, 0x01	; 1
   1f918:	2c 91       	ld	r18, X
   1f91a:	30 e0       	ldi	r19, 0x00	; 0
   1f91c:	11 96       	adiw	r26, 0x01	; 1
   1f91e:	8c 91       	ld	r24, X
   1f920:	11 97       	sbiw	r26, 0x01	; 1
   1f922:	90 e0       	ldi	r25, 0x00	; 0
   1f924:	98 2f       	mov	r25, r24
   1f926:	88 27       	eor	r24, r24
   1f928:	82 2b       	or	r24, r18
   1f92a:	93 2b       	or	r25, r19
   1f92c:	12 96       	adiw	r26, 0x02	; 2
   1f92e:	0c 01       	movw	r0, r24
   1f930:	d7 be       	out	0x37, r13	; 55
   1f932:	e8 95       	spm
   1f934:	11 24       	eor	r1, r1
   1f936:	32 96       	adiw	r30, 0x02	; 2
   1f938:	82 e0       	ldi	r24, 0x02	; 2
   1f93a:	a0 30       	cpi	r26, 0x00	; 0
   1f93c:	b8 07       	cpc	r27, r24
   1f93e:	61 f7       	brne	.-40     	; 0x1f918 <main+0x118>
   1f940:	85 e0       	ldi	r24, 0x05	; 5
   1f942:	f4 01       	movw	r30, r8
   1f944:	87 bf       	out	0x37, r24	; 55
   1f946:	e8 95       	spm
   1f948:	07 b6       	in	r0, 0x37	; 55
   1f94a:	00 fc       	sbrc	r0, 0
   1f94c:	fd cf       	rjmp	.-6      	; 0x1f948 <main+0x148>
   1f94e:	e7 be       	out	0x37, r14	; 55
   1f950:	e8 95       	spm
   1f952:	25 c0       	rjmp	.+74     	; 0x1f99e <main+0x19e>
   1f954:	84 37       	cpi	r24, 0x74	; 116
   1f956:	a9 f4       	brne	.+42     	; 0x1f982 <main+0x182>
   1f958:	ed d2       	rcall	.+1498   	; 0x1ff34 <getch>
   1f95a:	ec d2       	rcall	.+1496   	; 0x1ff34 <getch>
   1f95c:	b8 2e       	mov	r11, r24
   1f95e:	ea d2       	rcall	.+1492   	; 0x1ff34 <getch>
   1f960:	fb d2       	rcall	.+1526   	; 0x1ff58 <verifySpace>
   1f962:	cb 2c       	mov	r12, r11
   1f964:	84 01       	movw	r16, r8
   1f966:	f8 01       	movw	r30, r16
   1f968:	86 91       	elpm	r24, Z+
   1f96a:	dd d2       	rcall	.+1466   	; 0x1ff26 <putch>
   1f96c:	0f 5f       	subi	r16, 0xFF	; 255
   1f96e:	1f 4f       	sbci	r17, 0xFF	; 255
   1f970:	ca 94       	dec	r12
   1f972:	c9 f7       	brne	.-14     	; 0x1f966 <main+0x166>
   1f974:	08 94       	sec
   1f976:	81 1c       	adc	r8, r1
   1f978:	91 1c       	adc	r9, r1
   1f97a:	ba 94       	dec	r11
   1f97c:	8b 0c       	add	r8, r11
   1f97e:	91 1c       	adc	r9, r1
   1f980:	0e c0       	rjmp	.+28     	; 0x1f99e <main+0x19e>
   1f982:	85 37       	cpi	r24, 0x75	; 117
   1f984:	39 f4       	brne	.+14     	; 0x1f994 <main+0x194>
   1f986:	e8 d2       	rcall	.+1488   	; 0x1ff58 <verifySpace>
   1f988:	8e e1       	ldi	r24, 0x1E	; 30
   1f98a:	cd d2       	rcall	.+1434   	; 0x1ff26 <putch>
   1f98c:	87 e9       	ldi	r24, 0x97	; 151
   1f98e:	cb d2       	rcall	.+1430   	; 0x1ff26 <putch>
   1f990:	85 e0       	ldi	r24, 0x05	; 5
   1f992:	77 cf       	rjmp	.-274    	; 0x1f882 <main+0x82>
   1f994:	81 35       	cpi	r24, 0x51	; 81
   1f996:	11 f4       	brne	.+4      	; 0x1f99c <main+0x19c>
   1f998:	88 e0       	ldi	r24, 0x08	; 8
   1f99a:	d8 d2       	rcall	.+1456   	; 0x1ff4c <watchdogConfig>
   1f99c:	dd d2       	rcall	.+1466   	; 0x1ff58 <verifySpace>
   1f99e:	80 e1       	ldi	r24, 0x10	; 16
   1f9a0:	c2 d2       	rcall	.+1412   	; 0x1ff26 <putch>
   1f9a2:	60 cf       	rjmp	.-320    	; 0x1f864 <main+0x64>

0001f9a4 <write_flash_page>:
uint16_t address;

/* access to flash memory------------------------------------------ */

void write_flash_page()
{
   1f9a4:	ff 92       	push	r15
   1f9a6:	0f 93       	push	r16
   1f9a8:	1f 93       	push	r17
   1f9aa:	cf 93       	push	r28
   1f9ac:	df 93       	push	r29
	uint16_t i = 0;

	eeprom_busy_wait ();
   1f9ae:	f9 99       	sbic	0x1f, 1	; 31
   1f9b0:	fe cf       	rjmp	.-4      	; 0x1f9ae <write_flash_page+0xa>

	boot_page_erase (address);
   1f9b2:	60 91 1b 01 	lds	r22, 0x011B
   1f9b6:	70 91 1c 01 	lds	r23, 0x011C
   1f9ba:	cb 01       	movw	r24, r22
   1f9bc:	a0 e0       	ldi	r26, 0x00	; 0
   1f9be:	b0 e0       	ldi	r27, 0x00	; 0
   1f9c0:	23 e0       	ldi	r18, 0x03	; 3
   1f9c2:	fc 01       	movw	r30, r24
   1f9c4:	a0 93 5b 00 	sts	0x005B, r26
   1f9c8:	20 93 57 00 	sts	0x0057, r18
   1f9cc:	e8 95       	spm
	boot_spm_busy_wait ();      // Wait until the memory is erased.
   1f9ce:	07 b6       	in	r0, 0x37	; 55
   1f9d0:	00 fc       	sbrc	r0, 0
   1f9d2:	fd cf       	rjmp	.-6      	; 0x1f9ce <write_flash_page+0x2a>
   1f9d4:	cd e1       	ldi	r28, 0x1D	; 29
   1f9d6:	d1 e0       	ldi	r29, 0x01	; 1

	for (i=0; i<SPM_PAGESIZE; i+=2)
	{
		// Set up little-endian word.
		uint16_t w = *((uint16_t*)(pagebuffer + i));
		boot_page_fill (address + i, w);
   1f9d8:	ff 24       	eor	r15, r15
   1f9da:	f3 94       	inc	r15
	boot_spm_busy_wait ();      // Wait until the memory is erased.

	for (i=0; i<SPM_PAGESIZE; i+=2)
	{
		// Set up little-endian word.
		uint16_t w = *((uint16_t*)(pagebuffer + i));
   1f9dc:	09 91       	ld	r16, Y+
   1f9de:	19 91       	ld	r17, Y+
		boot_page_fill (address + i, w);
   1f9e0:	9b 01       	movw	r18, r22
   1f9e2:	40 e0       	ldi	r20, 0x00	; 0
   1f9e4:	50 e0       	ldi	r21, 0x00	; 0
   1f9e6:	08 01       	movw	r0, r16
   1f9e8:	f9 01       	movw	r30, r18
   1f9ea:	40 93 5b 00 	sts	0x005B, r20
   1f9ee:	f0 92 57 00 	sts	0x0057, r15
   1f9f2:	e8 95       	spm
   1f9f4:	11 24       	eor	r1, r1
   1f9f6:	6e 5f       	subi	r22, 0xFE	; 254
   1f9f8:	7f 4f       	sbci	r23, 0xFF	; 255
	eeprom_busy_wait ();

	boot_page_erase (address);
	boot_spm_busy_wait ();      // Wait until the memory is erased.

	for (i=0; i<SPM_PAGESIZE; i+=2)
   1f9fa:	22 e0       	ldi	r18, 0x02	; 2
   1f9fc:	cd 31       	cpi	r28, 0x1D	; 29
   1f9fe:	d2 07       	cpc	r29, r18
   1fa00:	69 f7       	brne	.-38     	; 0x1f9dc <write_flash_page+0x38>
		// Set up little-endian word.
		uint16_t w = *((uint16_t*)(pagebuffer + i));
		boot_page_fill (address + i, w);
	}

	boot_page_write(address);     // Store buffer in flash page.
   1fa02:	25 e0       	ldi	r18, 0x05	; 5
   1fa04:	fc 01       	movw	r30, r24
   1fa06:	a0 93 5b 00 	sts	0x005B, r26
   1fa0a:	20 93 57 00 	sts	0x0057, r18
   1fa0e:	e8 95       	spm
	boot_spm_busy_wait();            // Wait until the memory is written.
   1fa10:	07 b6       	in	r0, 0x37	; 55
   1fa12:	00 fc       	sbrc	r0, 0
   1fa14:	fd cf       	rjmp	.-6      	; 0x1fa10 <write_flash_page+0x6c>

	boot_rww_enable ();
   1fa16:	81 e1       	ldi	r24, 0x11	; 17
   1fa18:	80 93 57 00 	sts	0x0057, r24
   1fa1c:	e8 95       	spm
}
   1fa1e:	df 91       	pop	r29
   1fa20:	cf 91       	pop	r28
   1fa22:	1f 91       	pop	r17
   1fa24:	0f 91       	pop	r16
   1fa26:	ff 90       	pop	r15
   1fa28:	08 95       	ret

0001fa2a <spi_send_byte>:

/* ---[ SPI Interface ]---------------------------------------------- */

static void spi_send_byte(unsigned char data)
{
	SPDR=data;
   1fa2a:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF); // wait for byte transmitted...
   1fa2c:	0d b4       	in	r0, 0x2d	; 45
   1fa2e:	07 fe       	sbrs	r0, 7
   1fa30:	fd cf       	rjmp	.-6      	; 0x1fa2c <spi_send_byte+0x2>
}
   1fa32:	08 95       	ret

0001fa34 <send_cmd>:

static unsigned char send_cmd(void)
{
   1fa34:	1f 93       	push	r17
   1fa36:	cf 93       	push	r28
   1fa38:	df 93       	push	r29
	unsigned char i;
	unsigned char *buf;
	
	spi_send_byte(0xFF);      //Dummy delay 8 clocks
   1fa3a:	8f ef       	ldi	r24, 0xFF	; 255
   1fa3c:	f6 df       	rcall	.-20     	; 0x1fa2a <spi_send_byte>
	MMC_PORT &= ~(1<<MMC_CS); //MMC Chip Select -> Low (activate mmc)
   1fa3e:	2b 98       	cbi	0x05, 3	; 5

	/* send the 6 cmd bytes */
	i=6;
	buf = cmd;
   1fa40:	cb e0       	ldi	r28, 0x0B	; 11
   1fa42:	d1 e0       	ldi	r29, 0x01	; 1
	while(i) {
		spi_send_byte(*buf++);
   1fa44:	89 91       	ld	r24, Y+
   1fa46:	f1 df       	rcall	.-30     	; 0x1fa2a <spi_send_byte>
	MMC_PORT &= ~(1<<MMC_CS); //MMC Chip Select -> Low (activate mmc)

	/* send the 6 cmd bytes */
	i=6;
	buf = cmd;
	while(i) {
   1fa48:	81 e0       	ldi	r24, 0x01	; 1
   1fa4a:	c1 31       	cpi	r28, 0x11	; 17
   1fa4c:	d8 07       	cpc	r29, r24
   1fa4e:	d1 f7       	brne	.-12     	; 0x1fa44 <send_cmd+0x10>
   1fa50:	1f ef       	ldi	r17, 0xFF	; 255
	unsigned char result;
	
	/* wait for response */
	for(i=0; i<255; i++) {
	
 		spi_send_byte(0xFF);
   1fa52:	8f ef       	ldi	r24, 0xFF	; 255
   1fa54:	ea df       	rcall	.-44     	; 0x1fa2a <spi_send_byte>
		result = SPDR;
   1fa56:	8e b5       	in	r24, 0x2e	; 46
		
		if ((result & 0x80) == 0)
   1fa58:	87 ff       	sbrs	r24, 7
   1fa5a:	02 c0       	rjmp	.+4      	; 0x1fa60 <send_cmd+0x2c>
   1fa5c:	11 50       	subi	r17, 0x01	; 1
	}

	unsigned char result;
	
	/* wait for response */
	for(i=0; i<255; i++) {
   1fa5e:	c9 f7       	brne	.-14     	; 0x1fa52 <send_cmd+0x1e>
		if ((result & 0x80) == 0)
			break;
	}

	return(result); // TimeOut !?
}
   1fa60:	df 91       	pop	r29
   1fa62:	cf 91       	pop	r28
   1fa64:	1f 91       	pop	r17
   1fa66:	08 95       	ret

0001fa68 <mmc_start_read_block>:
 *			MMC_OK:						Command successful
 *			MMC_CMDERROR:			Error while sending read command to mmc
 *			MMC_NOSTARTBYTE:	No start byte received
 */
static unsigned char mmc_start_read_block(unsigned long adr)
{
   1fa68:	1f 93       	push	r17
   1fa6a:	cf 93       	push	r28
   1fa6c:	df 93       	push	r29
	adr <<= 1;
   1fa6e:	66 0f       	add	r22, r22
   1fa70:	77 1f       	adc	r23, r23
   1fa72:	88 1f       	adc	r24, r24
   1fa74:	99 1f       	adc	r25, r25
	
	cmd[0] = 0x40 + MMC_READ_SINGLE_BLOCK;
   1fa76:	21 e5       	ldi	r18, 0x51	; 81
   1fa78:	20 93 0b 01 	sts	0x010B, r18
	cmd[1] = (adr & 0x00FF0000) >> 0x10;
   1fa7c:	80 93 0c 01 	sts	0x010C, r24
	cmd[2] = (adr & 0x0000FF00) >> 0x08;
   1fa80:	70 93 0d 01 	sts	0x010D, r23
	cmd[3] = (adr & 0x000000FF);
   1fa84:	60 93 0e 01 	sts	0x010E, r22
	cmd[4] = 0;
   1fa88:	10 92 0f 01 	sts	0x010F, r1

	SPCR = 1<<SPE | 1<<MSTR | SPI_READ_CLOCK; //SPI Enable, SPI Master Mode
   1fa8c:	80 e5       	ldi	r24, 0x50	; 80
   1fa8e:	8c bd       	out	0x2c, r24	; 44
	
	if (send_cmd() != 0x00 || wait_start_byte()) {
   1fa90:	d1 df       	rcall	.-94     	; 0x1fa34 <send_cmd>
   1fa92:	88 23       	and	r24, r24
   1fa94:	41 f4       	brne	.+16     	; 0x1faa6 <mmc_start_read_block+0x3e>
   1fa96:	1f ef       	ldi	r17, 0xFF	; 255
{
	unsigned char i;
	
	i=255;
	do {
		spi_send_byte(0xFF);
   1fa98:	8f ef       	ldi	r24, 0xFF	; 255
   1fa9a:	c7 df       	rcall	.-114    	; 0x1fa2a <spi_send_byte>
		if(SPDR == 0xFE) return MMC_OK;
   1fa9c:	8e b5       	in	r24, 0x2e	; 46
   1fa9e:	8e 3f       	cpi	r24, 0xFE	; 254
   1faa0:	29 f0       	breq	.+10     	; 0x1faac <mmc_start_read_block+0x44>
   1faa2:	11 50       	subi	r17, 0x01	; 1
	} while(--i);
   1faa4:	c9 f7       	brne	.-14     	; 0x1fa98 <mmc_start_read_block+0x30>
	cmd[4] = 0;

	SPCR = 1<<SPE | 1<<MSTR | SPI_READ_CLOCK; //SPI Enable, SPI Master Mode
	
	if (send_cmd() != 0x00 || wait_start_byte()) {
		MMC_PORT |= 1<<MMC_CS; //MMC Chip Select -> High (deactivate mmc);
   1faa6:	2b 9a       	sbi	0x05, 3	; 5
		return(MMC_CMDERROR); //wrong response!
   1faa8:	83 e0       	ldi	r24, 0x03	; 3
   1faaa:	10 c0       	rjmp	.+32     	; 0x1facc <mmc_start_read_block+0x64>
 *		Return values:
 *			MMC_OK:						Command successful
 *			MMC_CMDERROR:			Error while sending read command to mmc
 *			MMC_NOSTARTBYTE:	No start byte received
 */
static unsigned char mmc_start_read_block(unsigned long adr)
   1faac:	cd e1       	ldi	r28, 0x1D	; 29
   1faae:	d2 e0       	ldi	r29, 0x02	; 2
 
	buf = buff;
	len= 512;
	
	while (len) {
		spi_send_byte(0xFF);
   1fab0:	8f ef       	ldi	r24, 0xFF	; 255
   1fab2:	bb df       	rcall	.-138    	; 0x1fa2a <spi_send_byte>
		*buf++ = SPDR;
   1fab4:	8e b5       	in	r24, 0x2e	; 46
   1fab6:	89 93       	st	Y+, r24
	unsigned short len;
 
	buf = buff;
	len= 512;
	
	while (len) {
   1fab8:	84 e0       	ldi	r24, 0x04	; 4
   1faba:	cd 31       	cpi	r28, 0x1D	; 29
   1fabc:	d8 07       	cpc	r29, r24
   1fabe:	c1 f7       	brne	.-16     	; 0x1fab0 <mmc_start_read_block+0x48>
		len--;
	}
	
	//mmc_stop_read_block
	//read 2 bytes CRC (not used);
	spi_send_byte(0xFF);
   1fac0:	8f ef       	ldi	r24, 0xFF	; 255
   1fac2:	b3 df       	rcall	.-154    	; 0x1fa2a <spi_send_byte>
	spi_send_byte(0xFF);
   1fac4:	8f ef       	ldi	r24, 0xFF	; 255
   1fac6:	b1 df       	rcall	.-158    	; 0x1fa2a <spi_send_byte>
	MMC_PORT |= 1<<MMC_CS; //MMC Chip Select -> High (deactivate mmc);
   1fac8:	2b 9a       	sbi	0x05, 3	; 5
	
	return(MMC_OK);
   1faca:	80 e0       	ldi	r24, 0x00	; 0
}
   1facc:	df 91       	pop	r29
   1face:	cf 91       	pop	r28
   1fad0:	1f 91       	pop	r17
   1fad2:	08 95       	ret

0001fad4 <file_read_byte>:
	file.sector_counter++;
}

/* ----[ file ]--------------------------------------------------- */

static uint8_t file_read_byte() {	// read a byte from the open file from the mmc...
   1fad4:	8f 92       	push	r8
   1fad6:	9f 92       	push	r9
   1fad8:	af 92       	push	r10
   1fada:	bf 92       	push	r11
   1fadc:	cf 92       	push	r12
   1fade:	df 92       	push	r13
   1fae0:	ef 92       	push	r14
   1fae2:	ff 92       	push	r15
   1fae4:	0f 93       	push	r16
   1fae6:	1f 93       	push	r17
   1fae8:	cf 93       	push	r28
   1faea:	df 93       	push	r29
	if (file.next >= buff + 512) {
   1faec:	a0 90 19 01 	lds	r10, 0x0119
   1faf0:	b0 90 1a 01 	lds	r11, 0x011A
   1faf4:	8d e1       	ldi	r24, 0x1D	; 29
   1faf6:	a8 16       	cp	r10, r24
   1faf8:	84 e0       	ldi	r24, 0x04	; 4
   1fafa:	b8 06       	cpc	r11, r24
   1fafc:	08 f4       	brcc	.+2      	; 0x1fb00 <file_read_byte+0x2c>
   1fafe:	5c c0       	rjmp	.+184    	; 0x1fbb8 <file_read_byte+0xe4>
{
	uint16_t clusteroffset;
	uint8_t currentfatsector;
	uint8_t temp, secoffset;
	uint32_t templong;
	uint16_t cluster = file.startcluster;
   1fb00:	00 91 11 01 	lds	r16, 0x0111
   1fb04:	10 91 12 01 	lds	r17, 0x0112
	
	fatsector_t *fatsector = (fatsector_t*) buff;

	/* SectorsPerCluster is always power of 2 ! */
	secoffset = (uint8_t)file.sector_counter & (SectorsPerCluster-1);
   1fb08:	e0 90 13 01 	lds	r14, 0x0113
   1fb0c:	f0 90 14 01 	lds	r15, 0x0114
   1fb10:	d0 90 02 01 	lds	r13, 0x0102
   1fb14:	cd 2c       	mov	r12, r13
   1fb16:	ca 94       	dec	r12
   1fb18:	ce 20       	and	r12, r14
	
	clusteroffset = file.sector_counter;
	temp = SectorsPerCluster >> 1;
   1fb1a:	d6 94       	lsr	r13
   1fb1c:	8d 2d       	mov	r24, r13
	fatsector_t *fatsector = (fatsector_t*) buff;

	/* SectorsPerCluster is always power of 2 ! */
	secoffset = (uint8_t)file.sector_counter & (SectorsPerCluster-1);
	
	clusteroffset = file.sector_counter;
   1fb1e:	e7 01       	movw	r28, r14
   1fb20:	03 c0       	rjmp	.+6      	; 0x1fb28 <file_read_byte+0x54>
	temp = SectorsPerCluster >> 1;
	while(temp) {
		clusteroffset >>= 1;
   1fb22:	d6 95       	lsr	r29
   1fb24:	c7 95       	ror	r28
        temp >>= 1;
   1fb26:	86 95       	lsr	r24
	/* SectorsPerCluster is always power of 2 ! */
	secoffset = (uint8_t)file.sector_counter & (SectorsPerCluster-1);
	
	clusteroffset = file.sector_counter;
	temp = SectorsPerCluster >> 1;
	while(temp) {
   1fb28:	88 23       	and	r24, r24
   1fb2a:	d9 f7       	brne	.-10     	; 0x1fb22 <file_read_byte+0x4e>
   1fb2c:	8f ef       	ldi	r24, 0xFF	; 255
   1fb2e:	17 c0       	rjmp	.+46     	; 0x1fb5e <file_read_byte+0x8a>
    }

	currentfatsector = 0xFF;
	while (clusteroffset)
	{
		temp = (unsigned char)((cluster & 0xFF00) >>8);
   1fb30:	81 2e       	mov	r8, r17
   1fb32:	99 24       	eor	r9, r9
          
		if (currentfatsector != temp)
   1fb34:	88 15       	cp	r24, r8
   1fb36:	51 f0       	breq	.+20     	; 0x1fb4c <file_read_byte+0x78>
		{
			mmc_start_read_block(FATRegionStartSec + temp);
   1fb38:	60 91 00 01 	lds	r22, 0x0100
   1fb3c:	70 91 01 01 	lds	r23, 0x0101
   1fb40:	68 0d       	add	r22, r8
   1fb42:	71 1d       	adc	r23, r1
   1fb44:	80 e0       	ldi	r24, 0x00	; 0
   1fb46:	90 e0       	ldi	r25, 0x00	; 0
   1fb48:	8f df       	rcall	.-226    	; 0x1fa68 <mmc_start_read_block>
   1fb4a:	88 2d       	mov	r24, r8

			currentfatsector = temp;
		}
		
		cluster = fatsector->fat_entry[cluster % 256];
   1fb4c:	f8 01       	movw	r30, r16
   1fb4e:	f0 70       	andi	r31, 0x00	; 0
   1fb50:	ee 0f       	add	r30, r30
   1fb52:	ff 1f       	adc	r31, r31
   1fb54:	e3 5e       	subi	r30, 0xE3	; 227
   1fb56:	fd 4f       	sbci	r31, 0xFD	; 253
   1fb58:	00 81       	ld	r16, Z
   1fb5a:	11 81       	ldd	r17, Z+1	; 0x01
		clusteroffset--;
   1fb5c:	21 97       	sbiw	r28, 0x01	; 1
		clusteroffset >>= 1;
        temp >>= 1;
    }

	currentfatsector = 0xFF;
	while (clusteroffset)
   1fb5e:	20 97       	sbiw	r28, 0x00	; 0
   1fb60:	39 f7       	brne	.-50     	; 0x1fb30 <file_read_byte+0x5c>
		
		cluster = fatsector->fat_entry[cluster % 256];
		clusteroffset--;
	}

	templong = cluster - 2;
   1fb62:	02 50       	subi	r16, 0x02	; 2
   1fb64:	10 40       	sbci	r17, 0x00	; 0
   1fb66:	20 e0       	ldi	r18, 0x00	; 0
   1fb68:	30 e0       	ldi	r19, 0x00	; 0
   1fb6a:	05 c0       	rjmp	.+10     	; 0x1fb76 <file_read_byte+0xa2>
	temp = SectorsPerCluster>>1;
	while(temp) {
		templong <<= 1;	
   1fb6c:	00 0f       	add	r16, r16
   1fb6e:	11 1f       	adc	r17, r17
   1fb70:	22 1f       	adc	r18, r18
   1fb72:	33 1f       	adc	r19, r19
		temp >>= 1;
   1fb74:	d6 94       	lsr	r13
		clusteroffset--;
	}

	templong = cluster - 2;
	temp = SectorsPerCluster>>1;
	while(temp) {
   1fb76:	dd 20       	and	r13, r13
   1fb78:	c9 f7       	brne	.-14     	; 0x1fb6c <file_read_byte+0x98>
		templong <<= 1;	
		temp >>= 1;
	}
		
	/* read the sector of the file into the buffer */
	mmc_start_read_block(templong + DataRegionStartSec + secoffset);
   1fb7a:	60 91 07 01 	lds	r22, 0x0107
   1fb7e:	70 91 08 01 	lds	r23, 0x0108
   1fb82:	80 91 09 01 	lds	r24, 0x0109
   1fb86:	90 91 0a 01 	lds	r25, 0x010A
   1fb8a:	6c 0d       	add	r22, r12
   1fb8c:	71 1d       	adc	r23, r1
   1fb8e:	81 1d       	adc	r24, r1
   1fb90:	91 1d       	adc	r25, r1
   1fb92:	60 0f       	add	r22, r16
   1fb94:	71 1f       	adc	r23, r17
   1fb96:	82 1f       	adc	r24, r18
   1fb98:	93 1f       	adc	r25, r19
   1fb9a:	66 df       	rcall	.-308    	; 0x1fa68 <mmc_start_read_block>
	
	/* advance to next sector */
	file.sector_counter++;
   1fb9c:	08 94       	sec
   1fb9e:	e1 1c       	adc	r14, r1
   1fba0:	f1 1c       	adc	r15, r1
   1fba2:	f0 92 14 01 	sts	0x0114, r15
   1fba6:	e0 92 13 01 	sts	0x0113, r14
/* ----[ file ]--------------------------------------------------- */

static uint8_t file_read_byte() {	// read a byte from the open file from the mmc...
	if (file.next >= buff + 512) {
	    fat16_readfilesector();
		file.next = file.next - 512;
   1fbaa:	c5 01       	movw	r24, r10
   1fbac:	80 50       	subi	r24, 0x00	; 0
   1fbae:	92 40       	sbci	r25, 0x02	; 2
   1fbb0:	90 93 1a 01 	sts	0x011A, r25
   1fbb4:	80 93 19 01 	sts	0x0119, r24
	}
	file.size--;
   1fbb8:	80 91 15 01 	lds	r24, 0x0115
   1fbbc:	90 91 16 01 	lds	r25, 0x0116
   1fbc0:	a0 91 17 01 	lds	r26, 0x0117
   1fbc4:	b0 91 18 01 	lds	r27, 0x0118
   1fbc8:	01 97       	sbiw	r24, 0x01	; 1
   1fbca:	a1 09       	sbc	r26, r1
   1fbcc:	b1 09       	sbc	r27, r1
   1fbce:	80 93 15 01 	sts	0x0115, r24
   1fbd2:	90 93 16 01 	sts	0x0116, r25
   1fbd6:	a0 93 17 01 	sts	0x0117, r26
   1fbda:	b0 93 18 01 	sts	0x0118, r27
	return *file.next++;
   1fbde:	e0 91 19 01 	lds	r30, 0x0119
   1fbe2:	f0 91 1a 01 	lds	r31, 0x011A
   1fbe6:	81 91       	ld	r24, Z+
   1fbe8:	f0 93 1a 01 	sts	0x011A, r31
   1fbec:	e0 93 19 01 	sts	0x0119, r30
}
   1fbf0:	df 91       	pop	r29
   1fbf2:	cf 91       	pop	r28
   1fbf4:	1f 91       	pop	r17
   1fbf6:	0f 91       	pop	r16
   1fbf8:	ff 90       	pop	r15
   1fbfa:	ef 90       	pop	r14
   1fbfc:	df 90       	pop	r13
   1fbfe:	cf 90       	pop	r12
   1fc00:	bf 90       	pop	r11
   1fc02:	af 90       	pop	r10
   1fc04:	9f 90       	pop	r9
   1fc06:	8f 90       	pop	r8
   1fc08:	08 95       	ret

0001fc0a <gethexnib>:

static char gethexnib(char a) {
	if(a >= 'a') {
   1fc0a:	81 36       	cpi	r24, 0x61	; 97
   1fc0c:	14 f0       	brlt	.+4      	; 0x1fc12 <gethexnib+0x8>
		return (a - 'a' + 0x0a);
   1fc0e:	87 55       	subi	r24, 0x57	; 87
   1fc10:	08 95       	ret
	} else if(a >= 'A') {
   1fc12:	81 34       	cpi	r24, 0x41	; 65
   1fc14:	14 f0       	brlt	.+4      	; 0x1fc1a <gethexnib+0x10>
		return (a - 'A' + 0x0a);
   1fc16:	87 53       	subi	r24, 0x37	; 55
   1fc18:	08 95       	ret
	} else if(a >= '0') {
   1fc1a:	80 33       	cpi	r24, 0x30	; 48
   1fc1c:	0c f0       	brlt	.+2      	; 0x1fc20 <gethexnib+0x16>
		return(a - '0');
   1fc1e:	80 53       	subi	r24, 0x30	; 48
	}
	return a;
}
   1fc20:	08 95       	ret

0001fc22 <file_read_hex>:

static uint8_t file_read_hex(void) {
   1fc22:	1f 93       	push	r17
	return (gethexnib(file_read_byte()) << 4) + gethexnib(file_read_byte());
   1fc24:	57 df       	rcall	.-338    	; 0x1fad4 <file_read_byte>
   1fc26:	f1 df       	rcall	.-30     	; 0x1fc0a <gethexnib>
   1fc28:	18 2f       	mov	r17, r24
   1fc2a:	54 df       	rcall	.-344    	; 0x1fad4 <file_read_byte>
   1fc2c:	ee df       	rcall	.-36     	; 0x1fc0a <gethexnib>
   1fc2e:	12 95       	swap	r17
   1fc30:	10 7f       	andi	r17, 0xF0	; 240
}
   1fc32:	81 0f       	add	r24, r17
   1fc34:	1f 91       	pop	r17
   1fc36:	08 95       	ret

0001fc38 <mmc_updater>:
		}
	}
	if (out != pagebuffer) write_flash_page();
}

void mmc_updater() {
   1fc38:	df 92       	push	r13
   1fc3a:	ef 92       	push	r14
   1fc3c:	ff 92       	push	r15
   1fc3e:	0f 93       	push	r16
   1fc40:	1f 93       	push	r17
   1fc42:	cf 93       	push	r28
   1fc44:	df 93       	push	r29
		if( ch == 0xFF) break;
		pagebuffer[i] = ch;
		i++;
	}
*/
	pagebuffer[0] = 'U';
   1fc46:	85 e5       	ldi	r24, 0x55	; 85
   1fc48:	80 93 1d 01 	sts	0x011D, r24
	pagebuffer[1] = 'P';
   1fc4c:	80 e5       	ldi	r24, 0x50	; 80
   1fc4e:	80 93 1e 01 	sts	0x011E, r24
	pagebuffer[2] = 'D';
   1fc52:	84 e4       	ldi	r24, 0x44	; 68
   1fc54:	80 93 1f 01 	sts	0x011F, r24
	pagebuffer[3] = '\0';
   1fc58:	10 92 20 01 	sts	0x0120, r1
*/
static inline unsigned char mmc_init(void)
{
	// the default after reset is already input
	//SPI_DDR &= ~(1<<SPI_MISO);	//SPI Data Out -> Input
	SPI_PORT |= 1<<SPI_SS;   //PB2 output: High (deselect other SPI chips)
   1fc5c:	2a 9a       	sbi	0x05, 2	; 5

	SPI_DDR  |= 1<<SPI_CLK | 1<<SPI_MOSI | 1<<SPI_SS; // SPI Data -> Output
   1fc5e:	84 b1       	in	r24, 0x04	; 4
   1fc60:	8c 62       	ori	r24, 0x2C	; 44
   1fc62:	84 b9       	out	0x04, r24	; 4
	MMC_DDR |= 1<<MMC_CS; 	//MMC Chip Select -> Output
   1fc64:	23 9a       	sbi	0x04, 3	; 4
	
	
	SPCR = 1<<SPE | 1<<MSTR | SPI_INIT_CLOCK; //SPI Enable, SPI Master Mode
   1fc66:	83 e5       	ldi	r24, 0x53	; 83
   1fc68:	8c bd       	out	0x2c, r24	; 44
   1fc6a:	0a e0       	ldi	r16, 0x0A	; 10
	
	unsigned char i;
	
	i=10;
	while(i) { //Pulse 80+ clocks to reset MMC
		spi_send_byte(0xFF);	
   1fc6c:	8f ef       	ldi	r24, 0xFF	; 255
   1fc6e:	dd de       	rcall	.-582    	; 0x1fa2a <spi_send_byte>
   1fc70:	01 50       	subi	r16, 0x01	; 1
	SPCR = 1<<SPE | 1<<MSTR | SPI_INIT_CLOCK; //SPI Enable, SPI Master Mode
	
	unsigned char i;
	
	i=10;
	while(i) { //Pulse 80+ clocks to reset MMC
   1fc72:	e1 f7       	brne	.-8      	; 0x1fc6c <mmc_updater+0x34>
 		i--;
	}

	unsigned char res;

	cmd[0] = 0x40 + MMC_GO_IDLE_STATE;
   1fc74:	80 e4       	ldi	r24, 0x40	; 64
   1fc76:	80 93 0b 01 	sts	0x010B, r24
	cmd[1] = 0x00; cmd[2] = 0x00; cmd[3] = 0x00; cmd[4] = 0x00; cmd[5] = 0x95;
   1fc7a:	10 92 0c 01 	sts	0x010C, r1
   1fc7e:	10 92 0d 01 	sts	0x010D, r1
   1fc82:	10 92 0e 01 	sts	0x010E, r1
   1fc86:	10 92 0f 01 	sts	0x010F, r1
   1fc8a:	85 e9       	ldi	r24, 0x95	; 149
   1fc8c:	80 93 10 01 	sts	0x0110, r24
   1fc90:	00 e1       	ldi	r16, 0x10	; 16
	
	for (i=0; i<MMC_CMD0_RETRY; i++)
	{
		res=send_cmd(); //store result of reset command, should be 0x01
   1fc92:	d0 de       	rcall	.-608    	; 0x1fa34 <send_cmd>
   1fc94:	18 2f       	mov	r17, r24

		MMC_PORT |= 1<<MMC_CS; //MMC Chip Select -> High (deactivate mmc);
   1fc96:	2b 9a       	sbi	0x05, 3	; 5
      	 	spi_send_byte(0xFF);
   1fc98:	8f ef       	ldi	r24, 0xFF	; 255
   1fc9a:	c7 de       	rcall	.-626    	; 0x1fa2a <spi_send_byte>
		if (res == 0x01)
   1fc9c:	11 30       	cpi	r17, 0x01	; 1
   1fc9e:	09 f4       	brne	.+2      	; 0x1fca2 <mmc_updater+0x6a>
   1fca0:	36 c1       	rjmp	.+620    	; 0x1ff0e <mmc_updater+0x2d6>
   1fca2:	01 50       	subi	r16, 0x01	; 1
	unsigned char res;

	cmd[0] = 0x40 + MMC_GO_IDLE_STATE;
	cmd[1] = 0x00; cmd[2] = 0x00; cmd[3] = 0x00; cmd[4] = 0x00; cmd[5] = 0x95;
	
	for (i=0; i<MMC_CMD0_RETRY; i++)
   1fca4:	b1 f7       	brne	.-20     	; 0x1fc92 <mmc_updater+0x5a>
   1fca6:	37 c1       	rjmp	.+622    	; 0x1ff16 <mmc_updater+0x2de>
		
//May be this becomes an endless loop ?
//Counting i from 0 to 255 and then timeout
//was to SHORT for some of my cards !
	while(send_cmd() != 0) {
		MMC_PORT |= 1<<MMC_CS; //MMC Chip Select -> High (deactivate);
   1fca8:	2b 9a       	sbi	0x05, 3	; 5
		spi_send_byte(0xFF);
   1fcaa:	8f ef       	ldi	r24, 0xFF	; 255
   1fcac:	be de       	rcall	.-644    	; 0x1fa2a <spi_send_byte>
	cmd[0]=0x40 + MMC_SEND_OP_COND;
		
//May be this becomes an endless loop ?
//Counting i from 0 to 255 and then timeout
//was to SHORT for some of my cards !
	while(send_cmd() != 0) {
   1fcae:	c2 de       	rcall	.-636    	; 0x1fa34 <send_cmd>
   1fcb0:	88 23       	and	r24, r24
   1fcb2:	d1 f7       	brne	.-12     	; 0x1fca8 <mmc_updater+0x70>
   1fcb4:	18 c1       	rjmp	.+560    	; 0x1fee6 <mmc_updater+0x2ae>
	if (mmc_init() != MMC_OK) return 1;
	
    mmc_start_read_block(0);

    // Try sector 0 as a bootsector
	if ((vbr->bsFileSysType[0] == 'F') && (vbr->bsFileSysType[4] == '6'))
   1fcb6:	80 91 57 02 	lds	r24, 0x0257
   1fcba:	86 33       	cpi	r24, 0x36	; 54
   1fcbc:	29 f4       	brne	.+10     	; 0x1fcc8 <mmc_updater+0x90>
	{
		FATRegionStartSec = 0;
   1fcbe:	10 92 01 01 	sts	0x0101, r1
   1fcc2:	10 92 00 01 	sts	0x0100, r1
   1fcc6:	17 c0       	rjmp	.+46     	; 0x1fcf6 <mmc_updater+0xbe>
	}
	else // Try sector 0 as a MBR	
	{     	 
		FATRegionStartSec = mbr->sector.partition[0].sectorOffset;
   1fcc8:	60 91 e3 03 	lds	r22, 0x03E3
   1fccc:	70 91 e4 03 	lds	r23, 0x03E4
   1fcd0:	80 91 e5 03 	lds	r24, 0x03E5
   1fcd4:	90 91 e6 03 	lds	r25, 0x03E6
   1fcd8:	70 93 01 01 	sts	0x0101, r23
   1fcdc:	60 93 00 01 	sts	0x0100, r22
          
		mmc_start_read_block(mbr->sector.partition[0].sectorOffset);
   1fce0:	c3 de       	rcall	.-634    	; 0x1fa68 <mmc_start_read_block>
	  
        if ((vbr->bsFileSysType[0] != 'F') || (vbr->bsFileSysType[4] != '6'))
   1fce2:	80 91 53 02 	lds	r24, 0x0253
   1fce6:	86 34       	cpi	r24, 0x46	; 70
   1fce8:	09 f0       	breq	.+2      	; 0x1fcec <mmc_updater+0xb4>
   1fcea:	15 c1       	rjmp	.+554    	; 0x1ff16 <mmc_updater+0x2de>
   1fcec:	80 91 57 02 	lds	r24, 0x0257
   1fcf0:	86 33       	cpi	r24, 0x36	; 54
   1fcf2:	09 f0       	breq	.+2      	; 0x1fcf6 <mmc_updater+0xbe>
   1fcf4:	10 c1       	rjmp	.+544    	; 0x1ff16 <mmc_updater+0x2de>
		   return 2; // No FAT16 found
     }
    
	SectorsPerCluster  			= vbr->bsSecPerClus; // 4
   1fcf6:	80 91 2a 02 	lds	r24, 0x022A
   1fcfa:	80 93 02 01 	sts	0x0102, r24
	
	// Calculation Algorithms
	FATRegionStartSec			+= vbr->bsRsvdSecCnt;						// 6
   1fcfe:	80 91 2b 02 	lds	r24, 0x022B
   1fd02:	90 91 2c 02 	lds	r25, 0x022C
   1fd06:	20 91 00 01 	lds	r18, 0x0100
   1fd0a:	30 91 01 01 	lds	r19, 0x0101
   1fd0e:	82 0f       	add	r24, r18
   1fd10:	93 1f       	adc	r25, r19
   1fd12:	90 93 01 01 	sts	0x0101, r25
   1fd16:	80 93 00 01 	sts	0x0100, r24
	RootDirRegionStartSec	 	= FATRegionStartSec + (vbr->bsNumFATs * vbr->bsNrSeProFAT16);		// 496	
   1fd1a:	60 91 2d 02 	lds	r22, 0x022D
   1fd1e:	70 e0       	ldi	r23, 0x00	; 0
   1fd20:	40 91 33 02 	lds	r20, 0x0233
   1fd24:	50 91 34 02 	lds	r21, 0x0234
   1fd28:	64 9f       	mul	r22, r20
   1fd2a:	90 01       	movw	r18, r0
   1fd2c:	65 9f       	mul	r22, r21
   1fd2e:	30 0d       	add	r19, r0
   1fd30:	74 9f       	mul	r23, r20
   1fd32:	30 0d       	add	r19, r0
   1fd34:	11 24       	eor	r1, r1
   1fd36:	28 0f       	add	r18, r24
   1fd38:	39 1f       	adc	r19, r25
   1fd3a:	30 93 04 01 	sts	0x0104, r19
   1fd3e:	20 93 03 01 	sts	0x0103, r18
	RootDirRegionSize		 	= (vbr->bsRootEntCnt / 16); 						// 32
   1fd42:	80 91 2e 02 	lds	r24, 0x022E
   1fd46:	90 91 2f 02 	lds	r25, 0x022F
   1fd4a:	14 e0       	ldi	r17, 0x04	; 4
   1fd4c:	96 95       	lsr	r25
   1fd4e:	87 95       	ror	r24
   1fd50:	1a 95       	dec	r17
   1fd52:	e1 f7       	brne	.-8      	; 0x1fd4c <mmc_updater+0x114>
   1fd54:	90 93 06 01 	sts	0x0106, r25
   1fd58:	80 93 05 01 	sts	0x0105, r24
	DataRegionStartSec 			= RootDirRegionStartSec + RootDirRegionSize;	// 528
   1fd5c:	82 0f       	add	r24, r18
   1fd5e:	93 1f       	adc	r25, r19
   1fd60:	a0 e0       	ldi	r26, 0x00	; 0
   1fd62:	b0 e0       	ldi	r27, 0x00	; 0
   1fd64:	80 93 07 01 	sts	0x0107, r24
   1fd68:	90 93 08 01 	sts	0x0108, r25
   1fd6c:	a0 93 09 01 	sts	0x0109, r26
   1fd70:	b0 93 0a 01 	sts	0x010A, r27
   1fd74:	c0 e0       	ldi	r28, 0x00	; 0
   1fd76:	d0 e0       	ldi	r29, 0x00	; 0

	/* fill in the file structure */
	file.startcluster = dir->fstclust;
	file.size = dir->filesize;
	file.sector_counter = 0;
	file.next = buff + 512;
   1fd78:	0d e1       	ldi	r16, 0x1D	; 29
   1fd7a:	14 e0       	ldi	r17, 0x04	; 4
static inline uint8_t fat16_readRootDirEntry(uint16_t entry_num) {
	uint8_t direntry_in_sector;
 	direntry_t *dir;
		
	/* Check for end of root dir region reached! */
	if ((entry_num / 16) >= RootDirRegionSize)
   1fd7c:	ce 01       	movw	r24, r28
   1fd7e:	b4 e0       	ldi	r27, 0x04	; 4
   1fd80:	96 95       	lsr	r25
   1fd82:	87 95       	ror	r24
   1fd84:	ba 95       	dec	r27
   1fd86:	e1 f7       	brne	.-8      	; 0x1fd80 <mmc_updater+0x148>
   1fd88:	20 91 05 01 	lds	r18, 0x0105
   1fd8c:	30 91 06 01 	lds	r19, 0x0106
   1fd90:	82 17       	cp	r24, r18
   1fd92:	93 07       	cpc	r25, r19
   1fd94:	08 f0       	brcs	.+2      	; 0x1fd98 <mmc_updater+0x160>
   1fd96:	a0 c0       	rjmp	.+320    	; 0x1fed8 <mmc_updater+0x2a0>
		return 0;

	/* this finds the sector in which the entry will be saved */	
	uint32_t dirsector = RootDirRegionStartSec + entry_num / 16;
   1fd98:	60 91 03 01 	lds	r22, 0x0103
   1fd9c:	70 91 04 01 	lds	r23, 0x0104
   1fda0:	68 0f       	add	r22, r24
   1fda2:	79 1f       	adc	r23, r25
   1fda4:	80 e0       	ldi	r24, 0x00	; 0
   1fda6:	90 e0       	ldi	r25, 0x00	; 0
	/* this is the offset inside the sector */
	/* there are 16 entries in a sector, each 32 bytes long */
    direntry_in_sector = (unsigned char) entry_num % 16;

	/* get the sector into the buffer */
	mmc_start_read_block(dirsector);
   1fda8:	5f de       	rcall	.-834    	; 0x1fa68 <mmc_start_read_block>
	/* this finds the sector in which the entry will be saved */	
	uint32_t dirsector = RootDirRegionStartSec + entry_num / 16;

	/* this is the offset inside the sector */
	/* there are 16 entries in a sector, each 32 bytes long */
    direntry_in_sector = (unsigned char) entry_num % 16;
   1fdaa:	ce 01       	movw	r24, r28
   1fdac:	8f 70       	andi	r24, 0x0F	; 15
   1fdae:	e8 2f       	mov	r30, r24

	/* get the sector into the buffer */
	mmc_start_read_block(dirsector);
	
	/* pointer to the direntry inside the buffer */
	dir = (direntry_t *) buff + direntry_in_sector;
   1fdb0:	f0 e0       	ldi	r31, 0x00	; 0
   1fdb2:	a5 e0       	ldi	r26, 0x05	; 5
   1fdb4:	ee 0f       	add	r30, r30
   1fdb6:	ff 1f       	adc	r31, r31
   1fdb8:	aa 95       	dec	r26
   1fdba:	e1 f7       	brne	.-8      	; 0x1fdb4 <mmc_updater+0x17c>
   1fdbc:	e3 5e       	subi	r30, 0xE3	; 227
   1fdbe:	fd 4f       	sbci	r31, 0xFD	; 253

	if ((dir->name[0] == 0) || (dir->name[0] == 0xE5) || (dir->fstclust == 0))
   1fdc0:	80 81       	ld	r24, Z
   1fdc2:	88 23       	and	r24, r24
   1fdc4:	09 f4       	brne	.+2      	; 0x1fdc8 <mmc_updater+0x190>
   1fdc6:	88 c0       	rjmp	.+272    	; 0x1fed8 <mmc_updater+0x2a0>
   1fdc8:	82 8d       	ldd	r24, Z+26	; 0x1a
   1fdca:	93 8d       	ldd	r25, Z+27	; 0x1b
   1fdcc:	00 97       	sbiw	r24, 0x00	; 0
   1fdce:	09 f4       	brne	.+2      	; 0x1fdd2 <mmc_updater+0x19a>
   1fdd0:	83 c0       	rjmp	.+262    	; 0x1fed8 <mmc_updater+0x2a0>
		return 0;

	/* fill in the file structure */
	file.startcluster = dir->fstclust;
   1fdd2:	90 93 12 01 	sts	0x0112, r25
   1fdd6:	80 93 11 01 	sts	0x0111, r24
	file.size = dir->filesize;
   1fdda:	84 8d       	ldd	r24, Z+28	; 0x1c
   1fddc:	95 8d       	ldd	r25, Z+29	; 0x1d
   1fdde:	a6 8d       	ldd	r26, Z+30	; 0x1e
   1fde0:	b7 8d       	ldd	r27, Z+31	; 0x1f
   1fde2:	80 93 15 01 	sts	0x0115, r24
   1fde6:	90 93 16 01 	sts	0x0116, r25
   1fdea:	a0 93 17 01 	sts	0x0117, r26
   1fdee:	b0 93 18 01 	sts	0x0118, r27
	file.sector_counter = 0;
   1fdf2:	10 92 14 01 	sts	0x0114, r1
   1fdf6:	10 92 13 01 	sts	0x0113, r1
	file.next = buff + 512;
   1fdfa:	10 93 1a 01 	sts	0x011A, r17
   1fdfe:	00 93 19 01 	sts	0x0119, r16

	/* compare name */
	uint8_t i = 0;
	uint8_t match = 1;
   1fe02:	51 e0       	ldi	r21, 0x01	; 1
	for (i = 0; pagebuffer[i]; i++) { 
   1fe04:	40 e0       	ldi	r20, 0x00	; 0
   1fe06:	0f c0       	rjmp	.+30     	; 0x1fe26 <mmc_updater+0x1ee>
	  match &= (pagebuffer[i] == dir->name[i]);
   1fe08:	30 e0       	ldi	r19, 0x00	; 0
   1fe0a:	8e 0f       	add	r24, r30
   1fe0c:	9f 1f       	adc	r25, r31
   1fe0e:	dc 01       	movw	r26, r24
   1fe10:	8c 91       	ld	r24, X
   1fe12:	99 27       	eor	r25, r25
   1fe14:	87 fd       	sbrc	r24, 7
   1fe16:	90 95       	com	r25
   1fe18:	61 e0       	ldi	r22, 0x01	; 1
   1fe1a:	28 17       	cp	r18, r24
   1fe1c:	39 07       	cpc	r19, r25
   1fe1e:	09 f0       	breq	.+2      	; 0x1fe22 <mmc_updater+0x1ea>
   1fe20:	60 e0       	ldi	r22, 0x00	; 0
   1fe22:	56 23       	and	r21, r22
	file.next = buff + 512;

	/* compare name */
	uint8_t i = 0;
	uint8_t match = 1;
	for (i = 0; pagebuffer[i]; i++) { 
   1fe24:	4f 5f       	subi	r20, 0xFF	; 255
   1fe26:	84 2f       	mov	r24, r20
   1fe28:	90 e0       	ldi	r25, 0x00	; 0
   1fe2a:	dc 01       	movw	r26, r24
   1fe2c:	a3 5e       	subi	r26, 0xE3	; 227
   1fe2e:	be 4f       	sbci	r27, 0xFE	; 254
   1fe30:	2c 91       	ld	r18, X
   1fe32:	22 23       	and	r18, r18
   1fe34:	49 f7       	brne	.-46     	; 0x1fe08 <mmc_updater+0x1d0>
	  match &= (pagebuffer[i] == dir->name[i]);
	}
	if (!(match & i)) return 0;
   1fe36:	45 23       	and	r20, r21
   1fe38:	09 f4       	brne	.+2      	; 0x1fe3c <mmc_updater+0x204>
   1fe3a:	4e c0       	rjmp	.+156    	; 0x1fed8 <mmc_updater+0x2a0>
	
	/* match ending, seach for HEX => return 1, or EEP => return 2*/
	if (dir->name[9] != 'E') return 0;
   1fe3c:	81 85       	ldd	r24, Z+9	; 0x09
   1fe3e:	85 34       	cpi	r24, 0x45	; 69
   1fe40:	09 f0       	breq	.+2      	; 0x1fe44 <mmc_updater+0x20c>
   1fe42:	4a c0       	rjmp	.+148    	; 0x1fed8 <mmc_updater+0x2a0>
	if (dir->name[8] == 'H' && dir->name[10] == 'X') return 1;
   1fe44:	80 85       	ldd	r24, Z+8	; 0x08
   1fe46:	88 34       	cpi	r24, 0x48	; 72
   1fe48:	09 f0       	breq	.+2      	; 0x1fe4c <mmc_updater+0x214>
   1fe4a:	46 c0       	rjmp	.+140    	; 0x1fed8 <mmc_updater+0x2a0>
   1fe4c:	82 85       	ldd	r24, Z+10	; 0x0a
   1fe4e:	88 35       	cpi	r24, 0x58	; 88
   1fe50:	09 f0       	breq	.+2      	; 0x1fe54 <mmc_updater+0x21c>
   1fe52:	42 c0       	rjmp	.+132    	; 0x1fed8 <mmc_updater+0x2a0>
   1fe54:	52 c0       	rjmp	.+164    	; 0x1fefa <mmc_updater+0x2c2>
    uint8_t num_flash_words = 0;
	uint8_t* out = pagebuffer;
    address = 0;
	while (file.size)
	{
		if (num_flash_words)
   1fe56:	dd 20       	and	r13, r13
   1fe58:	d1 f0       	breq	.+52     	; 0x1fe8e <mmc_updater+0x256>
		{
			// read (de-hexify)
			*out++ = file_read_hex();
   1fe5a:	e3 de       	rcall	.-570    	; 0x1fc22 <file_read_hex>
   1fe5c:	f7 01       	movw	r30, r14
   1fe5e:	81 93       	st	Z+, r24
   1fe60:	7f 01       	movw	r14, r30
			num_flash_words--;
   1fe62:	da 94       	dec	r13
		
			// if pagebuffer is full
			if (out - pagebuffer == SPM_PAGESIZE) {
   1fe64:	fd e1       	ldi	r31, 0x1D	; 29
   1fe66:	ef 16       	cp	r14, r31
   1fe68:	f2 e0       	ldi	r31, 0x02	; 2
   1fe6a:	ff 06       	cpc	r15, r31
   1fe6c:	11 f5       	brne	.+68     	; 0x1feb2 <mmc_updater+0x27a>
			    // write page
			    write_flash_page();
   1fe6e:	9a dd       	rcall	.-1228   	; 0x1f9a4 <write_flash_page>
			    address += SPM_PAGESIZE;
   1fe70:	20 91 1b 01 	lds	r18, 0x011B
   1fe74:	30 91 1c 01 	lds	r19, 0x011C
   1fe78:	20 50       	subi	r18, 0x00	; 0
   1fe7a:	3f 4f       	sbci	r19, 0xFF	; 255
   1fe7c:	30 93 1c 01 	sts	0x011C, r19
   1fe80:	20 93 1b 01 	sts	0x011B, r18
				out = pagebuffer;
   1fe84:	fd e1       	ldi	r31, 0x1D	; 29
   1fe86:	ef 2e       	mov	r14, r31
   1fe88:	f1 e0       	ldi	r31, 0x01	; 1
   1fe8a:	ff 2e       	mov	r15, r31
   1fe8c:	12 c0       	rjmp	.+36     	; 0x1feb2 <mmc_updater+0x27a>
			}
		} 
		else
		{
			// skip bytes until we find another ':'
			if (file_read_byte() == ':') {
   1fe8e:	22 de       	rcall	.-956    	; 0x1fad4 <file_read_byte>
   1fe90:	8a 33       	cpi	r24, 0x3A	; 58
   1fe92:	79 f4       	brne	.+30     	; 0x1feb2 <mmc_updater+0x27a>
				num_flash_words = file_read_hex();
   1fe94:	c6 de       	rcall	.-628    	; 0x1fc22 <file_read_hex>
   1fe96:	d8 2e       	mov	r13, r24
				file.next+=4; /* skip 4 bytes */
   1fe98:	20 91 19 01 	lds	r18, 0x0119
   1fe9c:	30 91 1a 01 	lds	r19, 0x011A
   1fea0:	2c 5f       	subi	r18, 0xFC	; 252
   1fea2:	3f 4f       	sbci	r19, 0xFF	; 255
   1fea4:	30 93 1a 01 	sts	0x011A, r19
   1fea8:	20 93 19 01 	sts	0x0119, r18
				if (file_read_hex()) break;
   1feac:	ba de       	rcall	.-652    	; 0x1fc22 <file_read_hex>
   1feae:	88 23       	and	r24, r24
   1feb0:	69 f4       	brne	.+26     	; 0x1fecc <mmc_updater+0x294>
static inline void read_hex_file(void) {
	// read file and convert it from intel hex and flash it
    uint8_t num_flash_words = 0;
	uint8_t* out = pagebuffer;
    address = 0;
	while (file.size)
   1feb2:	20 91 15 01 	lds	r18, 0x0115
   1feb6:	30 91 16 01 	lds	r19, 0x0116
   1feba:	40 91 17 01 	lds	r20, 0x0117
   1febe:	50 91 18 01 	lds	r21, 0x0118
   1fec2:	21 15       	cp	r18, r1
   1fec4:	31 05       	cpc	r19, r1
   1fec6:	41 05       	cpc	r20, r1
   1fec8:	51 05       	cpc	r21, r1
   1feca:	29 f6       	brne	.-118    	; 0x1fe56 <mmc_updater+0x21e>
				file.next+=4; /* skip 4 bytes */
				if (file_read_hex()) break;
			}
		}
	}
	if (out != pagebuffer) write_flash_page();
   1fecc:	8d e1       	ldi	r24, 0x1D	; 29
   1fece:	e8 16       	cp	r14, r24
   1fed0:	81 e0       	ldi	r24, 0x01	; 1
   1fed2:	f8 06       	cpc	r15, r24
   1fed4:	09 f0       	breq	.+2      	; 0x1fed8 <mmc_updater+0x2a0>
   1fed6:	66 dd       	rcall	.-1332   	; 0x1f9a4 <write_flash_page>
		
		/* first, init mmc / fat */
	   	if (fat16_init() != 0) return;	

		/* for each file in ROOT... */
		for (entrycounter=0; entrycounter<512; entrycounter++)
   1fed8:	21 96       	adiw	r28, 0x01	; 1
   1feda:	92 e0       	ldi	r25, 0x02	; 2
   1fedc:	c0 30       	cpi	r28, 0x00	; 0
   1fede:	d9 07       	cpc	r29, r25
   1fee0:	09 f0       	breq	.+2      	; 0x1fee4 <mmc_updater+0x2ac>
   1fee2:	4c cf       	rjmp	.-360    	; 0x1fd7c <mmc_updater+0x144>
   1fee4:	18 c0       	rjmp	.+48     	; 0x1ff16 <mmc_updater+0x2de>
	mbr_t *mbr = (mbr_t*) buff;
	vbr_t *vbr = (vbr_t*) buff;
		
	if (mmc_init() != MMC_OK) return 1;
	
    mmc_start_read_block(0);
   1fee6:	60 e0       	ldi	r22, 0x00	; 0
   1fee8:	70 e0       	ldi	r23, 0x00	; 0
   1feea:	cb 01       	movw	r24, r22
   1feec:	bd dd       	rcall	.-1158   	; 0x1fa68 <mmc_start_read_block>

    // Try sector 0 as a bootsector
	if ((vbr->bsFileSysType[0] == 'F') && (vbr->bsFileSysType[4] == '6'))
   1feee:	80 91 53 02 	lds	r24, 0x0253
   1fef2:	86 34       	cpi	r24, 0x46	; 70
   1fef4:	09 f0       	breq	.+2      	; 0x1fef8 <mmc_updater+0x2c0>
   1fef6:	e8 ce       	rjmp	.-560    	; 0x1fcc8 <mmc_updater+0x90>
   1fef8:	de ce       	rjmp	.-580    	; 0x1fcb6 <mmc_updater+0x7e>

static inline void read_hex_file(void) {
	// read file and convert it from intel hex and flash it
    uint8_t num_flash_words = 0;
	uint8_t* out = pagebuffer;
    address = 0;
   1fefa:	10 92 1c 01 	sts	0x011C, r1
   1fefe:	10 92 1b 01 	sts	0x011B, r1
}

static inline void read_hex_file(void) {
	// read file and convert it from intel hex and flash it
    uint8_t num_flash_words = 0;
	uint8_t* out = pagebuffer;
   1ff02:	ed e1       	ldi	r30, 0x1D	; 29
   1ff04:	ee 2e       	mov	r14, r30
   1ff06:	e1 e0       	ldi	r30, 0x01	; 1
   1ff08:	fe 2e       	mov	r15, r30
	return (gethexnib(file_read_byte()) << 4) + gethexnib(file_read_byte());
}

static inline void read_hex_file(void) {
	// read file and convert it from intel hex and flash it
    uint8_t num_flash_words = 0;
   1ff0a:	dd 24       	eor	r13, r13
   1ff0c:	d2 cf       	rjmp	.-92     	; 0x1feb2 <mmc_updater+0x27a>
	if(i==MMC_CMD0_RETRY) return(MMC_TIMEOUT);

	if (res != 0x01) //Response R1 from MMC (0x01: IDLE, The card is in idle state and running the initializing process.)
		return(MMC_INIT);
	
	cmd[0]=0x40 + MMC_SEND_OP_COND;
   1ff0e:	81 e4       	ldi	r24, 0x41	; 65
   1ff10:	80 93 0b 01 	sts	0x010B, r24
   1ff14:	cc ce       	rjmp	.-616    	; 0x1fcae <mmc_updater+0x76>
			/* skip all unimportant files */
			i = fat16_readRootDirEntry(entrycounter);
			if (i == 1)	read_hex_file();
		}	
	}
}
   1ff16:	df 91       	pop	r29
   1ff18:	cf 91       	pop	r28
   1ff1a:	1f 91       	pop	r17
   1ff1c:	0f 91       	pop	r16
   1ff1e:	ff 90       	pop	r15
   1ff20:	ef 90       	pop	r14
   1ff22:	df 90       	pop	r13
   1ff24:	08 95       	ret

0001ff26 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
   1ff26:	90 91 c0 00 	lds	r25, 0x00C0
   1ff2a:	95 ff       	sbrs	r25, 5
   1ff2c:	fc cf       	rjmp	.-8      	; 0x1ff26 <putch>
  UDR0 = ch;
   1ff2e:	80 93 c6 00 	sts	0x00C6, r24
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
   1ff32:	08 95       	ret

0001ff34 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
   1ff34:	80 91 c0 00 	lds	r24, 0x00C0
   1ff38:	87 ff       	sbrs	r24, 7
   1ff3a:	fc cf       	rjmp	.-8      	; 0x1ff34 <getch>
    ;
  if (!(UCSR0A & _BV(FE0))) {
   1ff3c:	80 91 c0 00 	lds	r24, 0x00C0
   1ff40:	84 fd       	sbrc	r24, 4
   1ff42:	01 c0       	rjmp	.+2      	; 0x1ff46 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1ff44:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UDR0;
   1ff46:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
   1ff4a:	08 95       	ret

0001ff4c <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1ff4c:	e0 e6       	ldi	r30, 0x60	; 96
   1ff4e:	f0 e0       	ldi	r31, 0x00	; 0
   1ff50:	98 e1       	ldi	r25, 0x18	; 24
   1ff52:	90 83       	st	Z, r25
  WDTCSR = x;
   1ff54:	80 83       	st	Z, r24
}
   1ff56:	08 95       	ret

0001ff58 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
   1ff58:	ed df       	rcall	.-38     	; 0x1ff34 <getch>
   1ff5a:	80 32       	cpi	r24, 0x20	; 32
   1ff5c:	19 f0       	breq	.+6      	; 0x1ff64 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
   1ff5e:	88 e0       	ldi	r24, 0x08	; 8
   1ff60:	f5 df       	rcall	.-22     	; 0x1ff4c <watchdogConfig>
   1ff62:	ff cf       	rjmp	.-2      	; 0x1ff62 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
   1ff64:	84 e1       	ldi	r24, 0x14	; 20
   1ff66:	df cf       	rjmp	.-66     	; 0x1ff26 <putch>

0001ff68 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
   1ff68:	1f 93       	push	r17
   1ff6a:	18 2f       	mov	r17, r24
  do getch(); while (--count);
   1ff6c:	e3 df       	rcall	.-58     	; 0x1ff34 <getch>
   1ff6e:	11 50       	subi	r17, 0x01	; 1
   1ff70:	e9 f7       	brne	.-6      	; 0x1ff6c <getNch+0x4>
  verifySpace();
   1ff72:	f2 df       	rcall	.-28     	; 0x1ff58 <verifySpace>
}
   1ff74:	1f 91       	pop	r17
   1ff76:	08 95       	ret

0001ff78 <appStart>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
  WDTCSR = x;
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
   1ff78:	80 e0       	ldi	r24, 0x00	; 0
   1ff7a:	e8 df       	rcall	.-48     	; 0x1ff4c <watchdogConfig>
  __asm__ __volatile__ (
   1ff7c:	ee 27       	eor	r30, r30
   1ff7e:	ff 27       	eor	r31, r31
   1ff80:	09 94       	ijmp
